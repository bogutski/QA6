{
  "info": {
    "_postman_id": "795d8e87-6896-4dd7-939c-09c1ec5d1497",
    "name": "20606",
    "description": "API Testing for Local Coding",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Admin Login",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca72c8e4-0622-4499-9317-cca96cd2d57c",
                "exec": [
                  "pm.test(\"Response should be okay to process\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody();",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "  });",
                  "",
                  "pm.test(\"Authentication is successful\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth success\");",
                  "});",
                  "",
                  "pm.test(\"Check that status code is 200\", () => {",
                  "    pm.response.to.be.ok;",
                  "})",
                  "",
                  "const body = pm.response.json();",
                  "pm.environment.set(\"admin_token\", body.token);",
                  "pm.environment.set(\"admin_id\", body.userId);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"admin_20606@qa6.us\",\n    \"password\": \"admin20606\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "login"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Register",
      "item": [
        {
          "name": "User Register (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "25099250-8c83-4ae7-b564-de231c1d092b",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Response is not an error\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody('success', true);",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1a15c973-c9b5-4852-a632-86735c12e0c4",
                "exec": [
                  "pm.environment.set(\"user_email_new\", pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase());",
                  "pm.environment.set(\"user_password_new\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
                  "pm.environment.set(\"user_firstName_new\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
                  "pm.environment.set(\"user_lastName_new\", pm.variables.replaceIn(\"{{$randomLastName}}\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"{{user_password_new}}\",\n    \"firstName\": \"{{user_firstName_new}}\",\n    \"lastName\": \"{{user_lastName_new}}\",\n    \"phone\": \"17775551122\",\n    \"about\": \"123123\",\n    \"goals\": \"123123\",\n    \"englishLevel\": \"Pre-Intermediate\",\n    \"countryName\": \"Belarus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get By Email (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17f7ee0d-eb7e-4d6c-ad25-3ebf99065803",
                "exec": [
                  "const body = pm.response.json();",
                  "pm.environment.set(\"user_id\", body.payload._id);",
                  "",
                  "pm.test(\"Response is not an error\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody('success', true);",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "pm.test(\"User role is new\", () => {",
                  "    pm.expect(body.payload.roles).to.eql(['new']);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d4101f6c-398b-4cc8-ae59-85958f3478c4",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{admin_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/email/{{user_email_new}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "email",
                "{{user_email_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Register (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c7fe35d-b234-4942-a347-d73f14a1dd1d",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.be.badRequest;",
                  "});",
                  "",
                  "pm.test(\"Response has error message and correct fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Wrong password format\");",
                  "    pm.response.to.have.jsonBody('success', false);",
                  "    pm.response.to.have.jsonBody('fail', true);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f4ab1296-ca2b-46cb-9066-ced67968361a",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"\",\n    \"firstName\": \"{{user_firstName_new}}\",\n    \"lastName\": \"{{user_lastName_new}}\",\n    \"phone\": \"17775551122\",\n    \"about\": \"123123\",\n    \"goals\": \"123123\",\n    \"englishLevel\": \"Pre-Intermediate\",\n    \"countryName\": \"Belarus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Register (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f0e960f-5852-4703-9ce2-49bdf2ad80d8",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.be.notFound;",
                  "});",
                  "",
                  "pm.test(\"Response contains error message and correct fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User was not created\");",
                  "    pm.response.to.have.jsonBody('success', false);",
                  "    pm.response.to.have.jsonBody('fail', true);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0f4ab933-d741-4d88-a68d-918e3023de9d",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{user_password_new}}\",\n    \"firstName\": \"{{user_firstName_new}}\",\n    \"lastName\": \"\",\n    \"phone\": \"17775551122\",\n    \"about\": \"123123\",\n    \"goals\": \"123123\",\n    \"englishLevel\": \"Pre-Intermediate\",\n    \"countryName\": \"Belarus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Register (409)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4aa522d6-c048-4298-b7a5-80c824b2b08b",
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Check error message, success, and fail fields\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User with this e-mail exists\");",
                  "    pm.response.to.have.jsonBody('success', false);",
                  "    pm.response.to.have.jsonBody('fail', true);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d7020a48-fe20-481e-9d46-74b69f8aba6b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"{{user_password_new}}\",\n    \"firstName\": \"{{user_firstName_new}}\",\n    \"lastName\": \"{{user_lastName_new}}\",\n    \"phone\": \"17775551122\",\n    \"about\": \"123123\",\n    \"goals\": \"123123\",\n    \"englishLevel\": \"Pre-Intermediate\",\n    \"countryName\": \"Belarus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Login",
      "item": [
        {
          "name": "User Login (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8af0aceb-91c6-45c7-9471-0a398995baf1",
                "exec": [
                  "const body = pm.response.json();",
                  "",
                  "pm.environment.set(\"user_token\", body.token);",
                  "pm.environment.set(\"user_id\", body.userId);",
                  "",
                  "pm.test(\"Response should be okay to process\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody();",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "  });",
                  "",
                  "pm.test(\"Authentication is successful\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth success\");",
                  "});",
                  "",
                  "pm.test(\"Check that status code is 200\", () => {",
                  "    pm.response.to.be.ok;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"{{user_password_new}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6aa46bea-e34a-433b-873d-ff8b85c1c1c2",
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.be.unauthorized;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"\",\n    \"password\": \"{{user_password_new}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "login"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Get By Id",
      "item": [
        {
          "name": "User Get By Id (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1924c1c6-e672-4911-bbfb-64d9be28a9ba",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get By Id 2nd option (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8ff9945e-3fa3-4052-ba21-b5640ef88340",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get By Id (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c01dcb6a-0a70-4b10-8115-6e8048e7d684",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Permission denied\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/:userId",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Reset Password",
      "item": [
        {
          "name": "Reset Password (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2e4730e-c05d-4ee4-9e60-df59c0985260",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Check mail for reset password link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/request",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "request"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e63e93be-bad5-4acd-928f-2f4bf83d88b7",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{$randomEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/request",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "request"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Get Reset Password Hash",
      "item": [
        {
          "name": "Get Reset Password Hash (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f3d70ce-9106-419a-a128-ca4b33d372f0",
                "exec": [
                  "const body = pm.response.json();",
                  "",
                  "pm.environment.set(\"user_hash\", body.payload.hash);",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User get hash. Success\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/hash/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "hash",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Reset Password Hash (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7a3d1a5-d8ba-4b3f-999a-a010be54fd7f",
                "exec": [
                  "const body = pm.response.json();",
                  "",
                  "pm.environment.set(\"hash\", body.payload.hash);",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Permission denied\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/hash/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "hash",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Is Valid Reset Links",
      "item": [
        {
          "name": "User Is Valid Reset Links (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "572a9236-bab5-46bb-a948-d5b58ad20f0f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Valid link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"{{user_hash}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/valid",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "valid"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Is Valid Reset Links (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae05f5e4-fc47-4151-99e3-28827c2b7f2a",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Something went wrong. If it looks critical, please send a screenshot to support@pasv.us\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"\",\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/valid",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "valid"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Is Valid Reset Links (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0af0756b-b94b-4c9c-9af9-0d8e5c562bd5",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Invalid link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/valid",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "valid"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Password Reset New",
      "item": [
        {
          "name": "User Password Reset New (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7261f6bd-e9cf-4218-a4fe-bb5aa5c57870",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Your password has been changed successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"{{user_hash}}\",\n  \"password\": \"12345!\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Password Reset New (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e5ebe89-bd69-469c-a059-0fa350b6a7d3",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Invalid link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json",
                "disabled": true
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"{{user_hash}}\",\n  \"password\": \"12345\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Password Reset New (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96cfe0b4-de54-4392-b2cf-6fc76dc533ca",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Change password error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"\",\n  \"hash\": \"{{user_hash}}\",\n  \"password\": \"12345\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Password Reset New (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38593b80-fcfc-4320-b8b4-d9574676a870",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Change password error\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"\",\n  \"hash\": \"{{user_hash}}\",\n  \"password\": \"12345\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Password Reset New (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf7fc879-86cc-483d-a744-1bbeb5f7d1d0",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Something went wrong. If it looks critical, please send a screenshot to support@pasv.us\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"\",\n  \"password\": \"12345\",\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Delete by Id",
      "item": [
        {
          "name": "Delete User by Id (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8d5b87a-02c5-411d-8b2a-f47d45d32207",
                "exec": [
                  "var _ = require('lodash');",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User deleted\");",
                  "});",
                  "",
                  "function cleanup() {",
                  "    const clean = _.keys(pm.environment.toObject())",
                  "    _.each(clean, (item) => {",
                  "        if (item.startsWith(\"user\")) {",
                  "            pm.environment.unset(item);",
                  "        }",
                  "    })",
                  "}",
                  "cleanup();"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete User by Id (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75370b24-40b3-4bbc-8a2b-6a0719b5512b",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"API not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "{{user_id}}"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "User Get All Users",
      "item": [
        {
          "name": "User Get All Users (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7aa332b-4aaa-45f5-a903-c13ce44a9361",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Get all users. Success\");",
                  "});",
                  "",
                  "var template = `",
                  "    <table bgcolor=\"#c5e9eb\">",
                  "        <tr>",
                  "            <th>Id</th>",
                  "            <th>Name</th>",
                  "            <th>Email</th>",
                  "            <th>About</th>",
                  "            <th>Goals</th>",
                  "            <th>Phone</th>",
                  "            <th>Roles</th>",
                  "            <th>Links</th>",
                  "            <th>Created At</th>",
                  "            <th>Email Confirmed</th>",
                  "            <th>Phone Confirmed</th>",
                  "            <th>Groups</th>",
                  "            <th>Codewars Analytics</th>",
                  "        </tr>",
                  "",
                  "        {{#each response}}",
                  "            <tr>",
                  "                <td>{{_id}}</td>",
                  "                <td>{{name}}</td>",
                  "                <td>{{email}}</td>",
                  "                <td>{{about}}</td>",
                  "                <td>{{goals}}</td>",
                  "                <td>{{phone}}</td>",
                  "                <td>{{roles}}</td>",
                  "                <td>{{links}}</td>",
                  "                <td>{{createdAt}}</td>",
                  "                <td>{{emailConfirmed}}</td>",
                  "                <td>{{codewarsAnalytics}}</td>",
                  "",
                  "",
                  "            </tr>",
                  "        {{/each}}",
                  "    </table>",
                  "`;",
                  "let body = pm.response.json();",
                  "",
                  "pm.visualizer.set(template, {",
                  "    response: body.payload",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d80fe27f-791b-4b3e-a151-5d64e4f7675b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get All Users (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fadfe9fd-da09-4cfc-be4f-fc8356ca7a66",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth failed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9df97876-958c-4273-8a80-2e2d1965ab30",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get All Users (400)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d866fe38-8b46-4ed0-a381-db468adf9beb",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth failed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9e2521c9-0607-4d8d-a4e5-219ac46fe4dd",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get All Users (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64047d0-58ea-4dc5-af47-8340471a83f5",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"API not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c7c0f175-d245-43eb-955a-adf245183349",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}",
              "host": [
                "{{host}}"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Reset Password Happy Path",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "97425efe-cd93-4fa7-b264-bd48f962d05b",
                "exec": [
                  "pm.test(\"Response should be okay to process\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody();",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "  });",
                  "",
                  "pm.test(\"Authentication is successful\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth success\");",
                  "});",
                  "",
                  "pm.test(\"Check that status code is 200\", () => {",
                  "    pm.response.to.be.ok;",
                  "})",
                  "",
                  "const body = pm.response.json();",
                  "pm.environment.set(\"admin_token\", body.token);",
                  "pm.environment.set(\"admin_id\", body.userId);",
                  "",
                  "",
                  "console.log(pm.request.headers);",
                  "",
                  "console.log(pm.response.headers);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"admin_20606@qa6.us\",\n    \"password\": \"admin20606\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff694c04-a867-4c82-a2e1-0c29c1689525",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Response is not an error\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody('success', true);",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ccdef487-9b19-4f7b-aeb5-89d175e88bc9",
                "exec": [
                  "pm.environment.set(\"user_email_new\", pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase());",
                  "pm.environment.set(\"user_password_new\", pm.variables.replaceIn(\"{{$randomPassword}}\"));",
                  "pm.environment.set(\"user_firstName_new\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
                  "pm.environment.set(\"user_lastName_new\", pm.variables.replaceIn(\"{{$randomLastName}}\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"{{user_password_new}}\",\n    \"firstName\": \"{{user_firstName_new}}\",\n    \"lastName\": \"{{user_lastName_new}}\",\n    \"phone\": \"17775551122\",\n    \"about\": \"123123\",\n    \"goals\": \"123123\",\n    \"englishLevel\": \"Pre-Intermediate\",\n    \"countryName\": \"Belarus\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Get By Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "036bb9c9-8226-432b-a09c-7c0ae6de8b8c",
                "exec": [
                  "const body = pm.response.json();",
                  "pm.environment.set(\"user_id\", body.payload._id);",
                  "",
                  "pm.test(\"Response is not an error\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody('success', true);",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "pm.test(\"User role is new\", () => {",
                  "    pm.expect(body.payload.roles).to.eql(['new']);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d2f1e198-0d75-4246-a015-ee3e679cf44b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{admin_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/email/{{user_email_new}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "email",
                "{{user_email_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0398f33-814a-4ac8-af56-a2a4f67a0ecc",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Check mail for reset password link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/request",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "request"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Reset Password Hash",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6548af43-9647-4df1-8e74-db32a5f55427",
                "exec": [
                  "const body = pm.response.json();",
                  "",
                  "pm.environment.set(\"user_hash\", body.payload.hash);",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"User get hash. Success\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/hash/{{user_id}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "hash",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Is Valid Reset Links",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "98a85558-ecdd-4c1e-a2db-6f0b22395ec3",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Valid link\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"{{user_hash}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/valid",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "valid"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Password Reset New",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae31496c-bdd7-492f-b198-c1f9e81c6820",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Body matches string\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Your password has been changed successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c3842793-9d81-442b-8bf0-be2d6a5364aa",
                "exec": [
                  "pm.environment.set(\"user_password_new\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "{{user_token}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"hash\": \"{{user_hash}}\",\n  \"password\": \"{{user_password_new}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/password/reset/new",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "password",
                "reset",
                "new"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a074829-d4a9-46ef-a8e1-f6cefbbca246",
                "exec": [
                  "const body = pm.response.json();",
                  "",
                  "pm.environment.set(\"user_token\", body.token);",
                  "pm.environment.set(\"user_id\", body.userId);",
                  "",
                  "pm.test(\"Response should be okay to process\", function () {",
                  "      pm.response.to.not.be.error;",
                  "      pm.response.to.have.jsonBody();",
                  "      pm.response.to.not.have.jsonBody('error');",
                  "  });",
                  "",
                  "pm.test(\"Authentication is successful\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Auth success\");",
                  "});",
                  "",
                  "pm.test(\"Check that status code is 200\", () => {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "function cleanup() {",
                  "    const clean = _.keys(pm.environment.toObject())",
                  "    _.each(clean, (item) => {",
                  "        if (item.startsWith(\"user\")) {",
                  "            pm.environment.unset(item);",
                  "        }",
                  "    })",
                  "}",
                  "cleanup();"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"email\": \"{{user_email_new}}\",\n    \"password\": \"{{user_password_new}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/user/login",
              "host": [
                "{{host}}"
              ],
              "path": [
                "user",
                "login"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
