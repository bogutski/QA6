{
  "info": {
    "_postman_id": "06b658b4-a0da-4e91-9c42-1c4d2fdf62b3",
    "name": "Local Coding group20609 POSITIVE",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "User register User New",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "4ba3a0a3-c2cd-4376-bc8d-5f9cf757c0a0",
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "b8844459-ef7d-49c7-8bcd-dac34930b003",
            "exec": [
              "pm.environment.set(\"emailUserNew\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
              "pm.environment.set(\"passwordUserNew\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"{{emailUserNew}}\",\r\n    \"password\": \"{{passwordUserNew}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phone\": \"17775551122\",\r\n    \"about\": \"QA Engineer\",\r\n    \"goals\": \"123123\",\r\n    \"englishLevel\": \"Upper-Intermediate\",\r\n    \"countryName\": \"Canada\"\r\n }"
        },
        "url": {
          "raw": "{{host}}/user",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Login User New",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "31ac41c0-db01-4f20-9dec-2f15f4a2f8cc",
            "exec": [
              "const body = pm.response.json();\r",
              "const message = body.message;\r",
              "\r",
              "pm.environment.set(\"tokenUserNew\", body.token);\r",
              "pm.environment.set(\"userIdUserNew\", body.userId);\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"Auth success\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"{{emailUserNew}}\",\r\n    \"password\": \"{{passwordUserNew}}\"\r\n }"
        },
        "url": {
          "raw": "{{host}}/user/login",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Login [Admin]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "f6cd804e-5579-48ad-b152-9bfe38310c0e",
            "exec": [
              "const body = pm.response.json();",
              "const message = body.message;",
              "const name = body.user.name;",
              "",
              "pm.environment.set(\"token\", body.token);",
              "pm.environment.set(\"userId\", body.userId);",
              "",
              "pm.test(\"message is valid\", function () {",
              "    pm.expect(message).eq(\"Auth success\");",
              "});",
              "",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is less than 2000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "6ff5b72a-5a62-4392-949a-2cb22991a38e",
            "exec": [
              "pm.environment.set(\"emailAdmin\", pm.variables.replaceIn(\"testadmin@pasv.us\"));\r",
              "pm.environment.set(\"passwordAdmin\", pm.variables.replaceIn(\"testAdmin\"));"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"{{emailAdmin}}\",\r\n    \"password\": \"{{passwordAdmin}}\"\r\n }"
        },
        "url": {
          "raw": "{{host}}/user/login",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Get by Id by User New",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "cb23c9ea-9e5c-4a15-9de4-e62b884c5073",
            "exec": [
              "const body = pm.response.json();\r",
              "const id = body._id;\r",
              "const name = body.name;\r",
              "\r",
              "pm.test(\"user id is valid\", function () {\r",
              "    pm.expect(id).eq(pm.environment.get(\"userIdUserNew\"));\r",
              "});\r",
              "\r",
              "pm.test(\"user id contains 24 symbols\", function () {\r",
              "    pm.expect(id.length).eq(24);\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "{{tokenUserNew}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{host}}/user/{{userIdUserNew}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "{{userIdUserNew}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Password Reset Request",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "1d0b38ae-d090-4e3f-b393-8408c26f8d7c",
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "{{tokenUserNew}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{emailUserNew}}\"\n}",
          "options": {
            "raw": {}
          }
        },
        "url": {
          "raw": "{{host}}/user/password/reset/request",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "password",
            "reset",
            "request"
          ]
        },
        "description": "Due to this request we can get on email  reset password link. \r\nNext 4 requests are related to password reset procedure"
      },
      "response": []
    },
    {
      "name": "Get Reset Password Hash by Admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ba8c847e-9b42-41a8-bee1-f2007f6b6433",
            "exec": [
              "const body = pm.response.json();\r",
              "const hash = body.payload.hash;\r",
              "\r",
              "pm.environment.set(\"hash\", hash);\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "disabled": true
          },
          {
            "key": "Authorization",
            "type": "text",
            "value": "{{token}}"
          }
        ],
        "url": {
          "raw": "{{host}}/user/hash/{{userIdUserNew}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "hash",
            "{{userIdUserNew}}"
          ]
        },
        "description": "Due to this request we can get rest password hash history"
      },
      "response": []
    },
    {
      "name": "User Is Valid Reset Links",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "336b3bf7-0544-4f41-a84a-8640dd618e87",
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{userIdUserNew}}\",\n  \"hash\": \"{{hash}}\"\n}",
          "options": {
            "raw": {}
          }
        },
        "url": {
          "raw": "{{host}}/user/password/reset/valid",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "password",
            "reset",
            "valid"
          ]
        },
        "description": "Due to this request we can check if reset password link is valid."
      },
      "response": []
    },
    {
      "name": "User Password Reset New",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "4d040d41-64d4-4b18-af79-e9cf3d182633",
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "ab56b0a0-5b4f-495c-9188-e56039ded1cb",
            "exec": [
              "pm.environment.set(\"newPasswordUserNew\", \"apple\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{userIdUserNew}}\",\n  \"hash\": \"{{hash}}\",\n  \"password\": \"{{newPasswordUserNew}}\"\n}",
          "options": {
            "raw": {}
          }
        },
        "url": {
          "raw": "{{host}}/user/password/reset/new",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "password",
            "reset",
            "new"
          ]
        },
        "description": "Due to this request we can reset password to new one."
      },
      "response": []
    },
    {
      "name": "User Re-Login User New After Reset",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "8b4aa4cf-6711-44de-8cfe-09fc4275379b",
            "exec": [
              "const body = pm.response.json();\r",
              "const message = body.message;\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"Auth success\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"{{emailUserNew}}\",\r\n    \"password\": \"{{newPasswordUserNew}}\"\r\n }"
        },
        "url": {
          "raw": "{{host}}/user/login",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Update Role By Id",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "0064f305-8b43-47b1-a7e0-71700b405307",
            "exec": [
              "const body = pm.response.json();\r",
              "const message = body.message;\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"User updated\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "type": "text",
            "value": "{{token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n       \r\n       \"roles\":  [  \"new\", \"student\"  ]\r\n        \r\n\r\n  \r\n    \r\n}  \r\n"
        },
        "url": {
          "raw": "{{host}}/user/{{userIdUserNew}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "{{userIdUserNew}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Get by Id by User New (check a new role)",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "c68669a4-ddd9-42aa-b5f2-19e29d728184",
            "exec": [
              "const body = pm.response.json();\r",
              "const id = body._id;\r",
              "const name = body.name;\r",
              "\r",
              "pm.test(\"user id is valid\", function () {\r",
              "    pm.expect(id).eq(pm.environment.get(\"userIdUserNew\"));\r",
              "});\r",
              "\r",
              "pm.test(\"user id contains 24 symbols\", function () {\r",
              "    pm.expect(id.length).eq(24);\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "{{tokenUserNew}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{host}}/user/{{userIdUserNew}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "{{userIdUserNew}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Delete by Id by Admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "cb01fb76-b377-4025-9b5f-0a3930d54f32",
            "exec": [
              "const body = pm.response.json();\r",
              "const message = body.message;\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"User deleted\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "type": "text",
            "value": "{{token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{host}}/user/{{userIdUserNew}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "{{userIdUserNew}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Stats",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "6881ff91-5355-4bd1-b8a9-64d2e5ba456c",
            "exec": [
              "const body = pm.response.json();\r",
              "const message = body.message;\r",
              "\r",
              "pm.environment.set(\"allUsers\", body.payload.total);\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"Get User Stats. Success\");\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 2000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "type": "text",
            "value": "{{token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{host}}/user/stats",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user",
            "stats"
          ]
        }
      },
      "response": []
    },
    {
      "name": "User Get All Users [Admin]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "124e4beb-d199-4667-815c-a28334cc69ad",
            "exec": [
              "const body = pm.response.json();\r",
              "const users = body.payload;\r",
              "const message = body.message;\r",
              "\r",
              "pm.test(\"message is valid\", function () {\r",
              "    pm.expect(message).eq(\"Get all users. Success\");\r",
              "});\r",
              "\r",
              "pm.test(\"Number of all user is correct\", function () {\r",
              "    pm.expect(users.length).eq(pm.environment.get(\"allUsers\"));\r",
              "});\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response time is less than 5000ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
              "});\r",
              "\r",
              "pm.environment.unset(\"hash\");\r",
              "pm.environment.unset(\"newPasswordUserNew\");\r",
              "pm.environment.unset(\"environment.unset\");\r",
              "pm.environment.unset(\"token\");\r",
              "pm.environment.unset(\"userId\");\r",
              "pm.environment.unset(\"emailAdmin\");\r",
              "pm.environment.unset(\"passwordAdmin\");\r",
              "pm.environment.unset(\"emailRandom\");\r",
              "pm.environment.unset(\"passwordRandom\");\r",
              "pm.environment.unset(\"newToken\");\r",
              "pm.environment.unset(\"newUserId\");\r",
              "pm.environment.unset(\"allUsersBefore\");\r",
              "pm.environment.unset(\"allUsers\");\r",
              "pm.environment.unset(\"userIdUserNew\");\r",
              "pm.environment.unset(\"tokenUserNew\");\r",
              "pm.environment.unset(\"emailUserNew\");\r",
              "pm.environment.unset(\"passwordUserNew\");\r",
              "pm.environment.unset(\"newHash\");\r",
              "pm.environment.unset(\"newPasswordReset\");\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "type": "text",
            "value": "{{token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{host}}/user",
          "host": [
            "{{host}}"
          ],
          "path": [
            "user"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "f86d1f03-6626-451f-8f6f-e61b6721af77",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "2b7ae0a7-fc6f-4015-9e04-91c4f323bd74",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "protocolProfileBehavior": {}
}
